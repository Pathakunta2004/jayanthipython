                        OOP's
                      ========


1.Write a python program to perform polymorphism?

PROGRAM:
=======
class Animal:

    def sound(self):

        pass

class Cat(Animal):

    def sound(self):

        print("meow")

class Dog(Animal):

    def sound(self):

        print("woof")

def make_sound(animal):

    animal.sound()

cat=Cat()

dog=Dog()

make_sound(cat)

make_sound(dog)


OUTPUT:
=======

meow

woof


  

2.Write a python program to perform inheritance?

PROGRAM:
=======
class shape:

    def __init__(self,color):

        self.color=color
 
    def area(self):

        pass

class Circle(shape):

    def __init__(self,color,radius):

        super().__init__(color)

        self.radius=radius

    def area(self):

        return 3.14*self.radius**2

class Rectangle(shape):

    def __init__(self,color,width,height):

        super().__init__(color)

        self.width=width

        self.height=height

    def area(self):

        return self.width*self.height

circle=Circle("Red",5)

rectangle=Rectangle("blue",4,6)

print("Circle area:",circle.area())

print("Rectangle area:",rectangle.area())


OUTPUT:
=======

Circle area: 78.5
Rectangle area: 24
  

3.Write a Python program to perform attributes and methods?

PROGRAM:
========

class MyClass:

    def __init__(self):

        self.public_attribute="I'm a public attribute"

        self.protected_attribute="I'm a protected attribute"

        self.private_attribute="I'm a private attribute"

    def public_method(self):

        print("I'm a public method")

    def protected_method(self):

        print("I'm a protected method")

    def private_method(self):

        print("I'm a private method")

obj=MyClass()

print(obj.public_attribute)

obj.public_method()

print(obj.protected_attribute)

obj.protected_method()

print(obj.private_attribute)

obj.private_method()

OUTPUT:
=======

I'm a public attribute

I'm a public method

I'm a protected attribute

I'm a protected method
I'm a private attribute

I'm a private method


4.Write a python program to perform encapsulation?


PROGRAM:
========

class BankAccount:

    def __init__(self,account_number,balance):

        self.account_number=account_number

        self.balance=balance

    def get_account_number(self):

        return self.account_number

    def get_balance(self):

        return self.balance

    def deposite(self,amount):

        if amount>0:

            self.balance+=amount
            print("Deposit successful")

        else:

            print("Invalid amount for deposit")

    def withdraw(self,amount):
        if amount>0 and amount<=self.balance:

            self.balance=amount
            print("withdrawal successful")

        else:

            print("Insufficient funds or invalid amount for withdrawal")

account=BankAccount("1234567890",1000)
print("Account Number:",account.get_account_number())

print("balance:",account.get_balance())

account.deposite(500)

account.withdraw(200)

account.account_number="9876543210"

account.balance=5000

print("Account number:",account.get_account_number())

print("balance:",account.get_balance())
 
 
OUTPUT:
=======

Account Number: 1234567890

balance: 1000

Deposit successful

withdrawal successful

Account number: 9876543210

balance: 5000




      
              
